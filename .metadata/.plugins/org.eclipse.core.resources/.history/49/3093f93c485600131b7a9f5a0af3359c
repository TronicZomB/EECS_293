import java.util.ArrayList;
import java.util.List;
import java.util.Vector;


public class MinFilter extends Filter {
	private Integer windowSize = INFINITE_WINDOW;
	private List<Signal> inputs = new ArrayList<Signal>();
	private Signal<Number> output;	
	
	public MinFilter() {
		// Empty Constructor
	}
	
	public MinFilter(Integer windowSize) {
		if (windowSize <= 0) {
			throw new IndexOutOfBoundsException();
		}
		this.windowSize = windowSize;
	}
	
	public Signal<Number> filter(Signal<Number> in) {
		inputs.add(0, in);
		
		if (INFINITE_WINDOW == windowSize) {
			output = min();
		}
		else {
			output = windowMin();
		}
		
		return output;
	}
	
	public void reset() {
		inputs.clear();
	}
	
	private Signal<Number> windowMin() {
		Signal<Number> toReturn = null;
		Double minMagnitude = Double.MAX_VALUE;
		int nInputs = 0;
		
		if (inputs.size() < windowSize) {
			nInputs = inputs.size();
		}
		else {
			nInputs = windowSize;
		}
		
		for (int i = 0; i < nInputs; i++) {
			Signal<Number> s = inputs.get(i);
			if (s.getMagnitude().doubleValue() < minMagnitude) {
				toReturn = inputs.get(i);
				minMagnitude = toReturn.getMagnitude().doubleValue();
			}
		}
		
		return toReturn;
	}
	
	private Signal<Number> min() {
		int inputSize = inputs.size();
		Signal<Number> toReturn = null;
		Double minMagnitude = Double.MAX_VALUE;
		
		for (int i = 0; i < inputSize; i++) {
			Signal<?> s = inputs.get(i);
			if (s.getMagnitude().doubleValue() < minMagnitude) {
				toReturn = inputs.get(i);
				minMagnitude = toReturn.getMagnitude().doubleValue();
			}
		}
		
		return toReturn;
	}
}
