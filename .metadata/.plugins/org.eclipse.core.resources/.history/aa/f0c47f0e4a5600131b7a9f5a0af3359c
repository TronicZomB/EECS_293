import java.util.Vector;

/**
 * The Signal class is used as an intermediary to the Filter classes so that the Filter 
 * classes will be able to handle scalars and vectors similarly by handling Signals instead.
 * A scalar is simply a vector that is one dimensional. 
 * 
 * @param <T> The type of Number that this Signal will hold.
 */
public class Signal<T extends Number> {
	private Vector<T> vector = new Vector<T>();
	
	/**
	 * This constructor is used to create a scalar Signal.
	 * 
	 * @param t1 The one dimensional number that will make up this scalar Signal.
	 */
	public Signal(T t1) {
		vector.add(t1);
	}
	
	public Signal(T t1, T... tn) {
		vector.add(t1);
		
		for (int i = 0; i < tn.length; i++) {
			vector.add(tn[i]);
		}
	}
	
	public Signal(Vector<T> vector) {
		this.vector = vector;
	}
	
	public Number getMagnitude() {
		if (isScalar()) {
			return vector.get(0);
		}
		
		Double toReturn = 0.0;
		
		for (Number n : vector) {
			Double temp = n.doubleValue();
			toReturn += (temp * temp);
		}
		toReturn = Math.sqrt(toReturn);

		return (T) toReturn;
	}
	
	public Vector<T> getVector() {
		return this.vector;
	}
	
	public boolean isScalar() {
		return (vector.size() == 1);
	}
	
	public String toString() {
		return getMagnitude().toString();
	}
}
